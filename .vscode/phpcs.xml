<?xml version="1.0"?>
<ruleset name="LaravelSquare">
    <description>LaravelSquare coding standards</description>

    <!-- Excluded files and folders -->
    <exclude-pattern>*/bootstrap/*</exclude-pattern>
    <exclude-pattern>*/config/*</exclude-pattern>
    <exclude-pattern>*/node_modules/*</exclude-pattern>
    <exclude-pattern>*/storage/*</exclude-pattern>
    <exclude-pattern>*/storage_/*</exclude-pattern>
    <exclude-pattern>*/tests/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>

    <!-- Ignore views -->
    <exclude-pattern>*/resources/views/*</exclude-pattern>

    <!-- App files to ignore (note, lots of things in the /app folder will need linting) -->
    <exclude-pattern>*/app/Http/Kernel.php</exclude-pattern>
    <exclude-pattern>*/app/Http/Controllers/Controller.php</exclude-pattern>
    <exclude-pattern>*/app/Http/Middleware/*</exclude-pattern>
    <exclude-pattern>*/app/Exceptions/*</exclude-pattern>

    <!-- Filament Companies plugin files and folders -->
    <exclude-pattern>*/app/Actions/FilamentCompanies/*</exclude-pattern>
    <exclude-pattern>app/Policies/CompanyPolicy.php</exclude-pattern>


    <!-- Ignore index.php -->
    <exclude-pattern>*/public/index.php</exclude-pattern>

    <!-- Alphabetically sorted uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>

    <!-- Trailing array comma -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- PSR12 -->
    <rule ref="PSR12">
        <exclude name="PSR1.Files.SideEffects.FoundWithSymbols" />
        <exclude name="PSR12.Operators.OperatorSpacing.NoSpaceBefore"/>
        <exclude name="PSR12.Operators.OperatorSpacing.NoSpaceAfter"/>
    </rule>

    <!-- No spacing before or after concatenation $var.$anotherVar (vs $var . $anotherVar) -->
    <rule ref="Squiz.Strings.ConcatenationSpacing"/>

    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" type="boolean" value="false"/>
        </properties>
    </rule>

    <!-- Enforce empty line before return statements -->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="jumpStatements" type="array">
                <element value="return"/>
            </property>
        </properties>
    </rule>

    <!-- Limit doc comments to a single-line -->
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>

    <!-- PHPDoc comment grouping -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="annotationsGroups" type="array">
                <element value="
                    @var,
                    @param,
                    @return,
                "/>
                <element value="
                    @throws,
                "/>
            </property>
        </properties>
    </rule>



    <!-- Show progress -->
    <arg value="p"/>


    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Set tab width -->
    <arg name="tab-width" value="4"/>

    <!-- Forbidden Functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="dd" value="null" />
                <element key="env" value="null" />
                <element key="var_dump" value="null" />
                <element key="sleep" value="null" />
            </property>
        </properties>
    </rule>



    <!-- Line Length -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120" />
            <property name="absoluteLineLimit" value="120" />
        </properties>
    </rule>

    <!-- Uppercase Constants -->
    <rule ref="Generic.PHP.UpperCaseConstant" />


    <!-- No in-line control structures (e.g.  if ($condition) echo 'True'; makes sure this is multi-line) -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <severity>5</severity>
    </rule>

    <exclude name="PEAR.ControlStructures.MultiLineCondition"/>

    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace" />
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration" />
    <rule ref="Zend.Files.ClosingTag" />
    <rule ref="PEAR.Functions.ValidDefaultValue" />
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace"/>

    <!-- PHPDoc -->
    <!-- <rule ref="Squiz.Commenting.FunctionComment" />
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
    <rule ref="Squiz.Commenting.VariableComment" /> -->

    <!-- Whitespace -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>10</severity>
    </rule>
    <rul ref="Squiz.WhiteSpace.SemicolonSpacing" />
    <rul ref="Squiz.PHP.NonExecutableCode" />
    <rul ref="Squiz.Scope.StaticThisUsage" />

    <!-- Cyclomatic complexity -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="12"/>
        </properties>
    </rule>


    <!-- Nesting level -->
    <rule ref="Generic.Metrics.NestingLevel"/>

    <!-- Space before function declaration -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration" />

    <!-- Removing Sniffs from Generic as we do not want these -->
    <rule ref="Generic">
        <exclude name="Generic.Commenting.Todo" />
        <exclude name="Generic.Files.EndFileNoNewline" />
        <exclude name="Generic.Files.OneInterfacePerFile" />
        <exclude name="Generic.Formatting.NoSpaceAfterCast" />
        <exclude name="Generic.Functions.OpeningFunctionBraceKernighanRitchie" />
        <exclude name="Generic.NamingConventions.CamelCapsFunctionName" />
        <exclude name="Generic.PHP.ClosingPHPTag" />
        <exclude name="Generic.WhiteSpace.DisallowSpaceIndent" />
        <exclude name="Generic.Files.LowercasedFilename" />
        <exclude name="Generic.CodeAnalysis.AssignmentInCondition" />
        <exclude name="Generic.Arrays.DisallowShortArraySyntax" />
        <exclude name="Generic.PHP.DisallowShortOpenTag" />
        <exclude name="Generic.PHP.NoSilencedErrors" />
        <exclude name="Generic.Files.InlineHTML" />
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter" />
        <exclude name="Generic.CodeAnalysis.EmptyStatement" />
        <exclude name="Generic.Arrays.DisallowLongArraySyntax" />
        <exclude name="Generic.PHP.UpperCaseConstant" />
        <exclude name="Generic.Commenting.DocComment.MissingShort" />
        <exclude name="Generic.Commenting.DocComment.ShortNotCapital" />
        <exclude name="Generic.Strings.UnnecessaryStringConcat" />
        <exclude name="Generic.NamingConventions.UpperCaseConstantName" />
        <exclude name="Generic.PHP.RequireStrictTypes.MissingDeclaration" />
        <exclude name="Generic.Files.ExecutableFile.Executable" />
        <exclude name="Generic.Commenting.DocComment" />
        <exclude name="Generic.Formatting.SpaceBeforeCast.NoSpace" />
        <exclude name="Generic.NamingConventions.AbstractClassNamePrefix.Missing" />
        <exclude name="Generic.NamingConventions.TraitNameSuffix.Missing" />
        <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine" />
        <exclude name="Generic.Classes.OpeningBraceSameLine.BraceOnNewLine" />
    </rule>
</ruleset>
